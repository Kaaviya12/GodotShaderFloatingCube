[gd_scene load_steps=12 format=2]

[ext_resource path="res://FloatingCube.gd" type="Script" id=1]
[ext_resource path="res://FloatingCube.gdshader" type="Shader" id=2]

[sub_resource type="CubeMesh" id=1]
size = Vector3( 1, 1, 1 )

[sub_resource type="ShaderMaterial" id=5]
shader = ExtResource( 2 )
shader_param/time_factor = 5.0

[sub_resource type="Shader" id=6]
code = "shader_type spatial;
uniform sampler2D noise;	//This will allow sending a noise texture to the shader to make the plane look like a water body with waves
uniform float height_scale = 0.5;
uniform sampler2D normalmap;	//Used tp recalculate normals that will come from a new noise texture
varying vec2 tex_position;		//Used to pass VERTEX.xz from vertex to fragment function to use for normal recalculation
render_mode specular_toon;		//toon shading instead of a realistic PBR shading to add more highlights
uniform float time_factor = 5.0;


void vertex() {
	
	//The plane mesh coordinates are [-1,1] range but noise texture is [0,1], so normalize plane mesh coordinates by 
	//dividing 2.0 and adding 0.5 to get [0,1] range
	tex_position = (VERTEX.xz / 2.0) + 0.5;
  	float height = texture(noise, tex_position).x;	//Each vertex position specified before gets a noise texture height
	VERTEX.y += height * height_scale;	//Height is scaled and added to the vertex's y to create a wave shape/structure
	
	//Creating a water MOVEMENT by changing x, y, and z
	VERTEX.x += cos(TIME * time_factor + VERTEX.x + VERTEX.y + VERTEX.z) * 0.1;	//Move between -0.1 and +0.1 in x axis
	VERTEX.y += sin(TIME * time_factor + VERTEX.x + VERTEX.y + VERTEX.z) * 0.02; //Move between -0.02 and +0.02 in y axis
	VERTEX.z += sin(TIME * time_factor + VERTEX.x + VERTEX.y + VERTEX.z) * 0.03; //Move between -0.03 and +0.03 in z axis
	
}

void fragment() {
	
	//Since the shape of plane was changed in the shader to mimic water, we need to calculate the new normals from this new shape 
	//so that the lighting and any effects will render appropriately as per the new shape
	//normalmap uniform variable is where we added another noise texture in the shader param, and we will use the new normals from
	//this variable's noise texture to assign to NORMALMAP of the water body
	NORMALMAP = texture(normalmap, tex_position).xyz;
	RIM = 0.2;	//Increases the effect of light at different angles when looked down at water
	METALLIC = 0.0;	//Reflection
	
	//Makes water a bit shiny. Low roughness makes the color shiny like plastic, and high roughness makes the color appear more solid
    ROUGHNESS = 0.01;	
	ALBEDO = vec3(0.0, 0.3, 0.5);		//Color of water set to blue
}"

[sub_resource type="OpenSimplexNoise" id=7]

[sub_resource type="NoiseTexture" id=8]
noise = SubResource( 7 )

[sub_resource type="OpenSimplexNoise" id=9]

[sub_resource type="NoiseTexture" id=10]
as_normalmap = true
noise = SubResource( 9 )

[sub_resource type="ShaderMaterial" id=11]
shader = SubResource( 6 )
shader_param/height_scale = 0.5
shader_param/time_factor = 5.0
shader_param/noise = SubResource( 8 )
shader_param/normalmap = SubResource( 10 )

[sub_resource type="PlaneMesh" id=12]
material = SubResource( 11 )
size = Vector2( 1000, 1000 )
subdivide_width = 32
subdivide_depth = 32

[node name="Spatial" type="Spatial"]

[node name="Cube" type="MeshInstance" parent="."]
transform = Transform( 1, 0, 0, 0, -0.936458, 0.350783, 0, -0.350783, -0.936458, 1, 0.3, 1 )
mesh = SubResource( 1 )
skeleton = NodePath("")
material/0 = SubResource( 5 )
script = ExtResource( 1 )

[node name="Sea" type="MeshInstance" parent="."]
mesh = SubResource( 12 )

[node name="OmniLight" type="OmniLight" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0.726608, 2.77125, 0.274896 )

[node name="Camera" type="Camera" parent="."]
transform = Transform( 0.906308, -0.242404, 0.346189, 0, 0.819152, 0.573577, -0.422618, -0.519837, 0.742404, 3.10857, 2.24329, 4 )
far = 300.0
